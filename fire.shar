#!/bin/sh
# shar:	Shell Archiver  (v1.22)
#
#	Run the following text with /bin/sh to create:
#	  Makefile
#	  fire.c
#
sed 's/^X//' << 'SHAR_EOF' > Makefile &&
XCC= cc
XCFLAGS= -O -DM_TERMINFO -UM_TERMCAP
XLDFLAGS= -O
XOBJS= fire.o
X
X#Unix
X# LDLIBS= -lcurses -lm
X
X#Xenix
XLDLIBS= -ltinfo -lm
X
Xfire: $(OBJS)
X	$(CC) $(LDFLAGS) fire.o -o fire $(LDLIBS)
X
Xclean:
X	rm -f $(OBJS) fire
SHAR_EOF
chmod 0644 Makefile || echo "restore of Makefile fails"
sed 's/^X//' << 'SHAR_EOF' > fire.c &&
X#include <sys/types.h>
X#include <math.h>
X#include <curses.h>
X#include <string.h>
X
X#ifndef COLOR_BLACK
X#define start_color()
X#define COLOR_PAIR(a) 0
X#endif
X
Xextern double drand48();
Xextern void srand48();
Xextern long lrand48();
Xextern time_t time();
Xextern char *malloc();
Xextern void free();
Xextern unsigned int sleep();
X
X#define PART_COUNT 10
X#define PART_VARIANCE 5
X#define SIN_TABLE_SIZE 350
X#define COLOR_MIXED -1
X#define TABLE_SCALE(val) ((int)(val / M_PI * SIN_TABLE_SIZE))
X#define BOUNDCHAR(win, y, x, char) \
X	(((y) >= 0 && (y) < LINES && (x) >= 0 && (x) < COLS) ? \
X		mvwaddch((win), (y), (x), (char)) : 0)
X#define PAT_RAND_SEQ	0x01
X
Xtypedef struct particle_t {
X	double y_scale;
X	double x_scale;
X	double x_inc;
X	double x;
X	int old_y, old_x;
X	int direction;
X	int color;
X	int sequence;
X	int pattern_inc;
X	} particle_t;
X
Xtypedef struct pattern_t {
X	char *string;
X	int mask;
X	} pattern_t;
X
Xtypedef struct object_t {
X	int rel_y, rel_x;
X	int part_count;
X	pattern_t *pattern;
X	int pat_cycle;
X	int color;
X	int done_count;
X	int life;
X	double y_mag, x_mag;
X	particle_t *particles;
X	} object_t;
X
Xtypedef struct object_list_t {
X	object_t *object;
X	struct object_list_t *next;
X	} object_list_t;
X
Xstatic pattern_t Patterns[] = {
X	{"......+++++++******@@@@@@@", 0},
X	{"|\\-/", PAT_RAND_SEQ},
X	{".......ooooOOOOoooo", 0},
X	{"()", 0},
X	{"-=", PAT_RAND_SEQ},
X	{"*", 0}};
X#define PATTERN_SIZE (sizeof(Patterns) / sizeof(Patterns[0]))
X
Xstatic int ColorId = 1;
X#define RAND_COLOR() (lrand48() % ColorId + 1)
X
Xstatic void DoSinTable();
Xstatic void DisplayObject();
Xstatic void BuildParticles();
Xstatic object_t *BuildObject();
Xstatic void InitColors();
Xstatic void AddObject();
Xstatic void DoObjectList();
Xstatic void DeleteObject();
Xstatic void FreeMemory();
X
Xint main(argc, argv)
X
Xint argc;
Xchar *argv[];
X
X	{
X	double sin_table[SIN_TABLE_SIZE];
X	object_list_t *top;
X	time_t show_over;
X
X	nice(4);
X	printf("wait.");
X	fflush(stdout);
X	DoSinTable(sin_table);
X	srand48((long)time((time_t *)0));
X	initscr();
X	start_color();
X	InitColors();
X	top = (object_list_t *)malloc(sizeof(object_list_t));
X	top->object = BuildObject();
X	top->next = 0;
X	show_over = time((time_t *)0) + 10 * 60;
X	while (time((time_t *)0) < show_over)
X		{
X		if (! (lrand48() % 20))
X			AddObject(&top);
X		else
X			if (! top)
X				{
X				sleep(1);
X				AddObject(&top);
X				}
X		DoObjectList(stdscr, sin_table, &top);
X		wrefresh(stdscr);
X		}
X	endwin();
X	return 0;
X	}
X
Xstatic void DoObjectList(win, sin_table, top)
X
XWINDOW *win;
Xdouble *sin_table;
Xobject_list_t **top;
X
X	{
X	object_list_t *now, *old;
X
X	now = *top;
X	while (now)
X		{
X		DisplayObject(win, sin_table, now->object);
X		old = now;
X		now = now->next;
X		if (old->object->done_count >= old->object->part_count ||
X		    old->object->life < 0)
X			DeleteObject(old, top);
X		}
X	}
X
Xstatic void DeleteObject(zap, top)
X
Xobject_list_t *zap;
Xobject_list_t **top;
X
X	{
X	object_list_t *new, *last;
X
X	if (zap == *top)
X		{
X		new = zap->next;
X		FreeMemory(zap);
X		*top = new;
X		return;
X		}
X	new = *top;
X	while (new != zap)
X		{
X		last = new;
X		new = new->next;
X		}
X	last->next = zap->next;
X	FreeMemory(zap);
X	}
X
Xstatic void FreeMemory(item)
X
Xobject_list_t *item;
X
X	{
X	free((char *)item->object->particles);
X	free((char *)item->object);
X	free((char *)item);
X	}
X
Xstatic void AddObject(top)
X
Xobject_list_t **top;
X
X	{
X	object_list_t *new_top;
X
X	new_top = (object_list_t *)malloc(sizeof(object_list_t));
X	new_top->object = BuildObject();
X	new_top->next = *top;
X	*top = new_top;
X	}
X
Xstatic object_t *BuildObject()
X
X	{
X	object_t *object;
X
X	object = (object_t *)malloc(sizeof(object_t));
X	object->part_count = lrand48() % PART_VARIANCE + PART_COUNT;
X	object->particles = (particle_t *)malloc(object->part_count *
X	    sizeof(particle_t));
X	object->pattern = &Patterns[lrand48() % PATTERN_SIZE];
X	object->pat_cycle = strlen(object->pattern->string);
X	object->rel_y = LINES - lrand48() % 15;
X	object->rel_x = lrand48() % (COLS / 4 * 3) + COLS / 4 * 1 / 2;
X	object->color = lrand48() % 4 ? RAND_COLOR() : COLOR_MIXED;
X	object->done_count = 0;
X	object->y_mag = drand48() * 0.9 + 0.5;
X	object->x_mag = drand48() * 0.9 + 0.5;
X	object->life = lrand48() % 15 + 10;
X	BuildParticles(object);
X
X	return object;
X	}
X
Xstatic void DisplayObject(win, sin_table, object)
X
XWINDOW *win;
Xdouble *sin_table;
Xobject_t *object;
X
X	{
X	int i;
X	int draw_y, draw_x;
X	particle_t *p;
X	double y;
X	int sym;
X
X	if (--object->life < 0)
X		{
X		for (i = 0; i < object->part_count; ++i)
X			{
X			p = &object->particles[i];
X			BOUNDCHAR(win, p->old_y, p->old_x, ' ');
X			}
X		return;
X		}
X	for (i = 0; i < object->part_count; ++i)
X		{
X		p = &object->particles[i];
X		if (p->x < M_PI)
X			{
X			BOUNDCHAR(win, p->old_y, p->old_x, ' ');
X			y = sin_table[TABLE_SCALE(p->x)] * p->y_scale;
X			draw_y = object->rel_y - y;
X			draw_x = object->rel_x + p->direction * p->x *
X			    p->x_scale;
X			p->sequence += p->pattern_inc;
X			if (p->sequence < 0)
X				p->sequence = object->pat_cycle - 1;
X			else
X				if (p->sequence >= object->pat_cycle)
X					p->sequence = 0;
X			sym = object->pattern->string[p->sequence];
X			BOUNDCHAR(win, draw_y, draw_x,
X			    sym | COLOR_PAIR(p->color));
X			p->old_y = draw_y;
X			p->old_x = draw_x;
X			p->x += p->x_inc;
X			if (p->x >= M_PI)
X				{
X				BOUNDCHAR(win, draw_y, draw_x, ' ');
X				++object->done_count;
X				}
X			}
X		}
X	}
X
Xstatic void DoSinTable(table)
X
Xdouble *table;
X
X	{
X	int i;
X	double inc;
X	double current;
X
X	inc = M_PI / SIN_TABLE_SIZE;
X	for (i = 0, current = 0.0; i < SIN_TABLE_SIZE; ++i, current += inc)
X		{
X		table[i] = sin(current);
X		if (! (i % 66))
X			{
X			putchar('.');
X			fflush(stdout);
X			}
X		}
X	}
X
Xstatic void BuildParticles(object)
X
Xobject_t *object;
X
X	{
X	int i;
X	particle_t *p;
X
X	for (i = 0; i < object->part_count; ++i)
X		{
X		p = &object->particles[i];
X		p->y_scale = drand48() * (LINES - 1) * object->y_mag;
X		p->x_scale = drand48() * COLS / 6.0 * object->x_mag;
X		p->x_inc = drand48() * 0.05 + 0.1;
X		p->x = 0.0;
X		p->old_y = 0;
X		p->old_x = 0;
X		p->direction = lrand48() & 1 ? -1 : 1;
X		if (object->pattern->mask & PAT_RAND_SEQ)
X			{
X			p->sequence = lrand48() % object->pat_cycle;
X			p->pattern_inc = -p->direction;
X			}
X		else
X			{
X			p->sequence = 0;
X			p->pattern_inc = 1;
X			}
X		if (object->color == COLOR_MIXED)
X			p->color = RAND_COLOR();
X		else
X			p->color = object->color;
X		}
X	}
X
Xstatic void InitColors()
X
X	{
X#ifdef COLOR_BLACK
X	init_pair(ColorId++, COLOR_RED, COLOR_BLACK);
X	init_pair(ColorId++, COLOR_GREEN, COLOR_BLACK);
X	init_pair(ColorId++, COLOR_YELLOW, COLOR_BLACK);
X	init_pair(ColorId++, COLOR_BLUE, COLOR_BLACK);
X	init_pair(ColorId++, COLOR_MAGENTA, COLOR_BLACK);
X	init_pair(ColorId++, COLOR_CYAN, COLOR_BLACK);
X	init_pair(ColorId, COLOR_WHITE, COLOR_BLACK);
X#endif
X	}
X
SHAR_EOF
chmod 0644 fire.c || echo "restore of fire.c fails"
exit 0
